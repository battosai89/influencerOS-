"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/tasks/page",{

/***/ "(app-pages-browser)/./src/services/supabaseCrudService.ts":
/*!*********************************************!*\
  !*** ./src/services/supabaseCrudService.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addData: () => (/* binding */ addData),\n/* harmony export */   deleteData: () => (/* binding */ deleteData),\n/* harmony export */   fetchData: () => (/* binding */ fetchData),\n/* harmony export */   supabaseCrudService: () => (/* binding */ supabaseCrudService),\n/* harmony export */   updateData: () => (/* binding */ updateData)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\n// Generic fetch function\nasync function fetchData(tableName) {\n    const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(tableName).select('*');\n    if (error) {\n        console.error(\"Error fetching \".concat(tableName, \":\"), error);\n        return null;\n    }\n    return data;\n}\n// Generic add function\nasync function addData(tableName, item) {\n    const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(tableName).insert(item).select();\n    if (error) {\n        console.error(\"Error adding to \".concat(tableName, \":\"), error);\n        console.error('Error details:', {\n            message: error.message,\n            details: error.details,\n            hint: error.hint,\n            code: error.code\n        });\n        return null;\n    }\n    return data ? data[0] : null;\n}\n// Generic update function\nasync function updateData(tableName, id, updates) {\n    const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(tableName).update(updates).eq('id', id).select();\n    if (error) {\n        console.error(\"Error updating \".concat(tableName, \" with id \").concat(id, \":\"), error);\n        return null;\n    }\n    return data ? data[0] : null;\n}\n// Generic delete function\nasync function deleteData(tableName, id) {\n    const { error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(tableName).delete().eq('id', id);\n    if (error) {\n        console.error(\"Error deleting from \".concat(tableName, \" with id \").concat(id, \":\"), error);\n        return false;\n    }\n    return true;\n}\n// Specific CRUD operations for each entity\nconst supabaseCrudService = {\n    // Influencers\n    fetchInfluencers: ()=>fetchData('influencers'),\n    addInfluencer: (influencer)=>addData('influencers', influencer),\n    updateInfluencer: (id, updates)=>updateData('influencers', id, updates),\n    deleteInfluencer: (id)=>deleteData('influencers', id),\n    // Brands\n    fetchBrands: ()=>fetchData('brands'),\n    addBrand: (brand)=>addData('brands', brand),\n    updateBrand: (id, updates)=>updateData('brands', id, updates),\n    deleteBrand: (id)=>deleteData('brands', id),\n    // Contracts\n    fetchContracts: ()=>fetchData('contracts'),\n    addContract: (contract)=>addData('contracts', contract),\n    updateContract: (id, updates)=>updateData('contracts', id, updates),\n    deleteContract: (id)=>deleteData('contracts', id),\n    // Campaigns\n    fetchCampaigns: ()=>fetchData('campaigns'),\n    addCampaign: (campaign)=>addData('campaigns', campaign),\n    updateCampaign: (id, updates)=>updateData('campaigns', id, updates),\n    deleteCampaign: (id)=>deleteData('campaigns', id),\n    // Tasks\n    fetchTasks: ()=>fetchData('tasks'),\n    addTask: async (task)=>{\n        console.log('supabaseCrudService addTask called with:', task);\n        try {\n            const result = await addData('tasks', task);\n            console.log('supabaseCrudService addTask result:', result);\n            return result;\n        } catch (error) {\n            console.error('Error in supabaseCrudService addTask:', error);\n            throw error;\n        }\n    },\n    updateTask: (id, updates)=>updateData('tasks', id, updates),\n    deleteTask: (id)=>deleteData('tasks', id),\n    // Events\n    fetchEvents: ()=>fetchData('events'),\n    addEvent: (event)=>{\n        const eventData = {\n            id: event.id,\n            title: event.title,\n            start: event.start,\n            end: event.end,\n            allDay: event.allDay || false,\n            type: event.type,\n            brandId: event.brandId || null,\n            campaignId: event.campaignId || null\n        };\n        return addData('events', eventData);\n    },\n    updateEvent: (id, updates)=>updateData('events', id, updates),\n    deleteEvent: (id)=>deleteData('events', id),\n    // Content Pieces\n    fetchContentPieces: ()=>fetchData('content_pieces'),\n    addContentPiece: (contentPiece)=>addData('content_pieces', contentPiece),\n    updateContentPiece: (id, updates)=>updateData('content_pieces', id, updates),\n    deleteContentPiece: (id)=>deleteData('content_pieces', id),\n    // Invoices\n    fetchInvoices: ()=>fetchData('invoices'),\n    addInvoice: (invoice)=>addData('invoices', invoice),\n    updateInvoice: (id, updates)=>updateData('invoices', id, updates),\n    deleteInvoice: (id)=>deleteData('invoices', id),\n    // Contract Templates\n    fetchContractTemplates: ()=>fetchData('contract_templates'),\n    addContractTemplate: (template)=>addData('contract_templates', template),\n    updateContractTemplate: (id, updates)=>updateData('contract_templates', id, updates),\n    deleteContractTemplate: (id)=>deleteData('contract_templates', id),\n    // Notifications\n    fetchNotifications: ()=>fetchData('notifications'),\n    addNotification: (notification)=>addData('notifications', notification),\n    updateNotification: (id, updates)=>updateData('notifications', id, updates),\n    deleteNotification: (id)=>deleteData('notifications', id)\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/supabaseCrudService.ts\n"));

/***/ })

});